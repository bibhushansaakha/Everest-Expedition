---
export interface Props {
  oxygen: number;
  energy: number;
}

const { oxygen, energy } = Astro.props;
---

<div class="oxygen-energy">
  <h2>Resources</h2>
  <div class="resource-container">
    <div class="resource oxygen">
      <span class="resource-label">Oxygen</span>
      <div class="resource-bar">
        <div class="resource-progress" style={`width: ${oxygen}%;`} data-value={oxygen}></div>
      </div>
      <span class="resource-value">{oxygen.toFixed(2)}%</span>
    </div>
    <div class="resource energy">
      <span class="resource-label">Energy</span>
      <div class="resource-bar">
        <div class="resource-progress" style={`width: ${energy}%;`} data-value={energy}></div>
      </div>
      <span class="resource-value">{energy.toFixed(2)}%</span>
    </div>
  </div>
</div>

<style>
  .oxygen-energy {
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #2c3e50;
    font-size: 1.5rem;
    text-align: center;
  }

  .resource-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .resource {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .resource-label {
    width: 60px;
    font-size: 1rem;
    color: #7f8c8d;
  }

  .resource-bar {
    flex-grow: 1;
    height: 20px;
    background-color: #ecf0f1;
    border-radius: 10px;
    overflow: hidden;
  }

  .resource-progress {
    height: 100%;
    transition: width 1s ease-in-out, background-color 1s ease-in-out;
  }

  .oxygen .resource-progress {
    background-color: #3498db;
  }

  .energy .resource-progress {
    background-color: #2ecc71;
  }

  .resource-value {
    width: 60px;
    font-size: 1rem;
    font-weight: bold;
    color: #2c3e50;
    text-align: right;
  }
</style>

<script>
  function updateResourceBars() {
    const resourceBars = document.querySelectorAll('.resource-progress');
    resourceBars.forEach(bar => {
      const value = parseFloat(bar.getAttribute('data-value'));
      bar.style.width = `${value}%`;
    });
  }

  // Call updateResourceBars when the component is mounted and after each update
  document.addEventListener('astro:page-load', updateResourceBars);
  document.addEventListener('astro:after-swap', updateResourceBars);
</script>
